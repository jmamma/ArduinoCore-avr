   1               		.file	"DeviceStandardReq.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	USB_Device_ProcessControlRequest
  13               	USB_Device_ProcessControlRequest:
  14               	.LFB64:
  15               		.file 1 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c"
   1:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** /*
   2:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****              LUFA Library
   3:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****      Copyright (C) Dean Camera, 2010.
   4:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****               
   5:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****       www.fourwalledcubicle.com
   7:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** */
   8:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
   9:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** /*
  10:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  12:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software and its documentation for any purpose is hereby granted
  14:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   without fee, provided that the above copyright notice appear in 
  15:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   all copies and that both that the copyright notice and this
  16:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   permission notice and warranty disclaimer appear in supporting 
  17:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   documentation, and that the name of the author not be used in 
  18:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   advertising or publicity pertaining to distribution of the 
  19:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software without specific, written prior permission.
  20:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  21:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   The author disclaim all warranties with regard to this
  22:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software, including all implied warranties of merchantability
  23:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   special, indirect or consequential damages or any damages
  25:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   in an action of contract, negligence or other tortious action,
  27:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   arising out of or in connection with the use or performance of
  28:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   this software.
  29:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** */
  30:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  31:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #include "USBMode.h"
  33:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  34:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  36:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #define  __INCLUDE_FROM_DEVICESTDREQ_C
  37:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #include "DeviceStandardReq.h"
  38:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  39:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** uint8_t USB_ConfigurationNumber;
  40:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  41:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_SELF_POWER)
  42:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** bool    USB_CurrentlySelfPowered;
  43:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
  44:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  45:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_REMOTE_WAKEUP)
  46:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** bool    USB_RemoteWakeupEnabled;
  47:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
  48:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  49:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** void USB_Device_ProcessControlRequest(void)
  50:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
  16               		.loc 1 50 0
  17               		.cfi_startproc
  18 0000 1F93      		push r17
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 17, -2
  22 0002 CF93      		push r28
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 28, -3
  26 0004 DF93      		push r29
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 29, -4
  30 0006 00D0      		rcall .
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 7
  33 0008 CDB7      		in r28,__SP_L__
  34 000a DEB7      		in r29,__SP_H__
  35               	.LCFI4:
  36               		.cfi_def_cfa_register 28
  37               	/* prologue: function */
  38               	/* frame size = 2 */
  39               	/* stack size = 5 */
  40               	.L__stack_usage = 5
  41               	.LVL0:
  42 000c E0E0      		ldi r30,lo8(USB_ControlRequest)
  43 000e F0E0      		ldi r31,hi8(USB_ControlRequest)
  44 0010 80E0      		ldi r24,lo8(USB_ControlRequest+8)
  45 0012 90E0      		ldi r25,hi8(USB_ControlRequest+8)
  46               	.LVL1:
  47               	.L2:
  48               	.LBB64:
  49               	.LBB65:
  50               	.LBB66:
  51               		.file 2 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h"
   1:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
   2:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****               
   5:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
   8:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   9:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
  10:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  12:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  21:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
  30:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  31:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  34:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  37:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  40:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  41:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  44:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  48:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  50:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  51:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  53:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  55:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  
  56:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  59:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  63:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  66:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  70:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  72:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  74:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  75:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  78:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  84:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  88:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
  92:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  97:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 102:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 109:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 114:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 121:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 128:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 133:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 140:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 145:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 150:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 155:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 161:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 167:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 181:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 188:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 204:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 205:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 211:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 230:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 231:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 237:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 247:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 248:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 261:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 269:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 270:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 279:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 285:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 286:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 298:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 300:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 302:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 303:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 311:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 314:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 315:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 323:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 325:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 326:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 332:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 334:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 335:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 342:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 344:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 345:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 358:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 360:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 361:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 368:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 370:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 371:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 380:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 382:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 383:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 393:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 395:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 396:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 405:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 406:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 407:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 408:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 417:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 419:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 420:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 429:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 430:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 431:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 432:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 443:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 444:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 445:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 453:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 455:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 460:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 468:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 470:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 474:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 475:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 489:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 491:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 492:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 499:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 501:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 502:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 511:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 513:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 514:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 518:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 520:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 521:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 528:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 530:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 531:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 538:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 540:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 541:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 550:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
  52               		.loc 2 550 0 discriminator 3
  53 0014 2091 F100 		lds r18,241
  54               	.LBE66:
  55               	.LBE65:
  51:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	bool     RequestHandled = false;
  52:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
  53:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
  54:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  55:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_Byte();
  56               		.loc 1 55 0 discriminator 3
  57 0018 2193      		st Z+,r18
  58               	.LVL2:
  54:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_Byte();
  59               		.loc 1 54 0 discriminator 3
  60 001a 8E17      		cp r24,r30
  61 001c 9F07      		cpc r25,r31
  62 001e 01F4      		brne .L2
  63               	.LBE64:
  56:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  
  57:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  64               		.loc 1 57 0
  65 0020 8091 0000 		lds r24,USB_ControlRequest
  66               	.LVL3:
  58:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
  59:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bRequest)
  67               		.loc 1 59 0
  68 0024 E091 0000 		lds r30,USB_ControlRequest+1
  69               	.LVL4:
  70 0028 EA30      		cpi r30,lo8(10)
  71 002a 00F4      		brsh .L3
  72 002c F0E0      		ldi r31,0
  73 002e E050      		subi r30,lo8(-(gs(.L5)))
  74 0030 F040      		sbci r31,hi8(-(gs(.L5)))
  75 0032 0C94 0000 		jmp __tablejump2__
  76               		.p2align	1
  77               	.L5:
  78 0036 0000      		.word gs(.L4)
  79 0038 0000      		.word gs(.L6)
  80 003a 0000      		.word gs(.L3)
  81 003c 0000      		.word gs(.L6)
  82 003e 0000      		.word gs(.L3)
  83 0040 0000      		.word gs(.L7)
  84 0042 0000      		.word gs(.L8)
  85 0044 0000      		.word gs(.L3)
  86 0046 0000      		.word gs(.L9)
  87 0048 0000      		.word gs(.L10)
  88               	.L4:
  60:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
  61:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetStatus:
  62:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  89               		.loc 1 62 0
  90 004a 8D7F      		andi r24,lo8(-3)
  91               	.LVL5:
  92 004c 8038      		cpi r24,lo8(-128)
  93 004e 01F4      		brne .L3
  94               	.LVL6:
  95               	.L11:
  96               	.LBB67:
  97               	.LBB68:
 429:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
  98               		.loc 2 429 0
  99 0050 8091 E800 		lds r24,232
 100               	.LBE68:
 101               	.LBE67:
  63:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  64:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  65:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetStatus();
  66:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  67:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  68:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  69:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  70:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_ClearFeature:
  71:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetFeature:
  72:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  73:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  74:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  75:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_ClearSetFeature();
  76:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  77:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  78:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  79:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  80:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetAddress:
  81:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
  82:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  83:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_SetAddress();
  84:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  85:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  86:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  87:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  88:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetDescriptor:
  89:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  90:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
  91:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  92:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetDescriptor();
  93:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  94:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  95:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
  96:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  97:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetConfiguration:
  98:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
  99:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 100:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetConfiguration();
 101:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
 102:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 103:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 104:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 105:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetConfiguration:
 106:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 107:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 108:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_SetConfiguration();
 109:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
 110:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 111:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 112:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 113:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 114:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 115:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (!(RequestHandled))
 116:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  EVENT_USB_Device_UnhandledControlRequest();
 117:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  
 118:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 102               		.loc 1 118 0
 103 0054 83FF      		sbrs r24,3
 104 0056 00C0      		rjmp .L1
 105               	.LBB69:
 106               	.LBB70:
 489:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 107               		.loc 2 489 0
 108 0058 8091 EB00 		lds r24,235
 109 005c 8062      		ori r24,lo8(32)
 110 005e 8093 EB00 		sts 235,r24
 111               	.LBE70:
 112               	.LBE69:
 113               	.LBB71:
 114               	.LBB72:
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 115               		.loc 2 442 0
 116 0062 8091 E800 		lds r24,232
 117 0066 877F      		andi r24,lo8(-9)
 118 0068 8093 E800 		sts 232,r24
 119               	.L1:
 120               	/* epilogue start */
 121               	.LBE72:
 122               	.LBE71:
 119:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 120:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		Endpoint_StallTransaction();
 121:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		Endpoint_ClearSETUP();		
 122:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 123:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 123               		.loc 1 123 0
 124 006c 0F90      		pop __tmp_reg__
 125 006e 0F90      		pop __tmp_reg__
 126 0070 DF91      		pop r29
 127 0072 CF91      		pop r28
 128 0074 1F91      		pop r17
 129 0076 0895      		ret
 130               	.LVL7:
 131               	.L6:
  72:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
 132               		.loc 1 72 0
 133 0078 8D7F      		andi r24,lo8(-3)
 134               	.LVL8:
 135 007a 01F0      		breq .L11
 136               	.L3:
 116:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  
 137               		.loc 1 116 0
 138 007c 0E94 0000 		call EVENT_USB_Device_UnhandledControlRequest
 139               	.LVL9:
 140 0080 00C0      		rjmp .L11
 141               	.LVL10:
 142               	.L7:
  81:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 143               		.loc 1 81 0
 144 0082 8111      		cpse r24,__zero_reg__
 145 0084 00C0      		rjmp .L3
 146               	.LBB73:
 147               	.LBB74:
 124:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 125:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_SetAddress(void)
 126:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 127:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 148               		.loc 1 127 0
 149 0086 1091 0000 		lds r17,USB_ControlRequest+2
 150               	.LVL11:
 151               	.LBB75:
 152               	.LBB76:
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 153               		.loc 2 442 0
 154 008a 8091 E800 		lds r24,232
 155               	.LVL12:
 156 008e 877F      		andi r24,lo8(-9)
 157 0090 8093 E800 		sts 232,r24
 158               	.LVL13:
 159               	.LBE76:
 160               	.LBE75:
 128:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 129:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 130:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 131:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 161               		.loc 1 131 0
 162 0094 0E94 0000 		call Endpoint_ClearStatusStage
 163               	.LVL14:
 164               	.L13:
 165               	.LBB77:
 166               	.LBB78:
 405:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 167               		.loc 2 405 0
 168 0098 8091 E800 		lds r24,232
 169               	.LBE78:
 170               	.LBE77:
 132:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 133:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()))
 171               		.loc 1 133 0
 172 009c 80FF      		sbrs r24,0
 173 009e 00C0      		rjmp .L14
 127:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 174               		.loc 1 127 0
 175 00a0 812F      		mov r24,r17
 176 00a2 8F77      		andi r24,lo8(127)
 134:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 135:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 136:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 137:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 138:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 139:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 177               		.loc 1 139 0
 178 00a4 92E0      		ldi r25,lo8(2)
 179 00a6 01F0      		breq .L15
 180 00a8 93E0      		ldi r25,lo8(3)
 181               	.L15:
 182 00aa 9EBB      		out 0x1e,r25
 183               	.LVL15:
 184               	.LBB79:
 185               	.LBB80:
 186               		.file 3 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
   1:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
   2:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****               
   5:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
   8:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
   9:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
  10:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  12:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in 
  15:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in 
  18:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the 
  19:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  21:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   this software.
  29:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
  30:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  31:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \file
  32:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  34:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  36:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  39:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  40:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  43:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  46:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @{
  47:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  48:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  49:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  52:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  57:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"	
  58:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  62:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  66:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  67:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  70:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  71:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  77:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        \n\n
  79:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  80:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode -- refer to the USB 2.0 standard.
  82:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 */
  83:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
  85:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  86:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
  89:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  91:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  95:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  98:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        \n
 104:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 105:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 109:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 111:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 113:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 116:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			};
 141:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 142:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Enables the device mode Start Of Frame events. When enabled, this causes the
 144:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to the
 145:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  at the start of each USB frame when enumerated in device mode.
 146:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 147:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 148:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void)
 149:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 150:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Enable(USB_INT_SOFI);
 151:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 152:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				
 153:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Disables the device mode Start Of Frame events. When disabled, this stop the firing of the
 154:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 155:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 156:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 157:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_DisableSOFEvents(void)
 158:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 159:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Disable(USB_INT_SOFI);
 160:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 161:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 162:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
 163:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Function to retrieve a given descriptor's size and memory location from the given descriptor
 164:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  index and language ID. This function MUST be overridden in the user application (added with 
 165:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  prototype and name so that the library can call it to retrieve descriptor data.
 166:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 167:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wValue               The type of the descriptor to retrieve in the upper byte, an
 168:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  lower byte (when more than one descriptor of the given type 
 169:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  case of string descriptors). The type may be one of the stan
 170:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  in the DescriptorTypes_t enum, or may be a class-specific de
 171:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wIndex               The language ID of the string to return if the wValue type i
 172:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  otherwise zero for standard descriptors, or as defined in a 
 173:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  standards.
 174:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[out] DescriptorAddress   Pointer to the descriptor in memory. This should be set by t
 175:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  the address of the descriptor.
 176:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[out] MemoryAddressSpace  A value from the \ref USB_DescriptorMemorySpaces_t enum to i
 177:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  space in which the descriptor is stored. This parameter does
 178:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  of the USE_*_DESCRIPTORS compile time options is used.
 179:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 180:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note By default, the library expects all descriptors to be located in flash memory via the 
 181:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        If descriptors should be located in RAM or EEPROM instead (to speed up access in the c
 182:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        allow the descriptors to be changed dynamically at runtime) either the USE_RAM_DESCRIP
 183:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        USE_EEPROM_DESCRIPTORS tokens may be defined in the project makefile and passed to the
 184:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        switch.
 185:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 186:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \return Size in bytes of the descriptor if it exists, zero or \ref NO_DESCRIPTOR otherwise.
 187:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 188:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 189:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    const uint8_t wIndex,
 190:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    void** const DescriptorAddress
 191:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESC
 192:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    , uint8_t* MemoryAddressSpace
 193:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
 194:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    ) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(3);
 195:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
 196:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Private Interface - For use in library only: */
 197:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	#if !defined(__DOXYGEN__)
 198:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 199:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 200:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 201:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void)
 202:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 203:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDCON |=  (1 << LSM);
 204:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 205:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 206:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 207:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void)
 208:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 209:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDCON &= ~(1 << LSM);
 210:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 211:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
 212:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 213:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
 214:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
 215:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 216:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 187               		.loc 3 216 0
 188 00ac 8068      		ori r24,lo8(-128)
 189 00ae 8093 E300 		sts 227,r24
 190 00b2 00C0      		rjmp .L11
 191               	.LVL16:
 192               	.L14:
 193               	.LBE80:
 194               	.LBE79:
 135:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 195               		.loc 1 135 0
 196 00b4 8EB3      		in r24,0x1e
 197 00b6 8111      		cpse r24,__zero_reg__
 198 00b8 00C0      		rjmp .L13
 199 00ba 00C0      		rjmp .L11
 200               	.LVL17:
 201               	.L8:
 202               	.LBE74:
 203               	.LBE73:
  89:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
 204               		.loc 1 89 0
 205 00bc 8058      		subi r24,lo8(-(-128))
 206               	.LVL18:
 207 00be 8230      		cpi r24,lo8(2)
 208 00c0 00F4      		brsh .L3
 209               	.LBB81:
 210               	.LBB82:
 140:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 141:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_Device_SetDeviceAddress(DeviceAddress);
 142:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 143:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	return;
 144:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 145:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 146:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_SetConfiguration(void)
 147:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 148:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if defined(FIXED_NUM_CONFIGURATIONS)
 149:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 150:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  return;
 151:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #else
 152:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if defined(USE_FLASH_DESCRIPTORS)
 153:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_FLASH
 154:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 155:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_EEPROM
 156:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_SRAM_DESCRIPTORS)
 157:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_SRAM
 158:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#else
 159:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		uint8_t MemoryAddressSpace;
 160:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 161:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 162:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_Descriptor_Device_t* DevDescriptorPtr;
 163:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 164:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
 165:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 166:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                               , &MemoryAddressSpace
 167:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 168:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                               ) == NO_DESCRIPTOR)
 169:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 170:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 171:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 172:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 173:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (MemoryAddressSpace == MEMSPACE_FLASH)
 174:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 175:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations
 176:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 177:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 178:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
 179:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 180:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurati
 181:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 182:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 183:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else
 184:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 185:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 186:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 187:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 188:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 189:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 190:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 191:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 192:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 193:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 194:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 195:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 196:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 197:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 198:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 199:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 200:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 201:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** void USB_Device_GetConfiguration(void)
 202:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 203:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 204:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 205:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Byte(USB_ConfigurationNumber);
 206:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 207:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 208:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 209:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 210:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 211:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 212:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static char USB_Device_NibbleToASCII(uint8_t Nibble)
 213:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 214:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Nibble = ((Nibble & 0x0F) + '0');
 215:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
 216:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 217:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 218:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_GetInternalSerialDescriptor(void)
 219:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 220:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	struct
 221:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 222:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		USB_Descriptor_Header_t Header;
 223:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		int16_t                 UnicodeString[20];
 224:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	} SignatureDescriptor;
 225:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 226:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Type = DTYPE_String;
 227:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 228:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 229:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t SigReadAddress = 0x0E;
 230:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 231:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 232:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 233:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 234:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		{
 235:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 236:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
 237:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (SerialCharNum & 0x01)
 238:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 239:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				SerialByte >>= 4;
 240:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				SigReadAddress++;
 241:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 242:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
 243:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
 244:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		}
 245:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 246:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 247:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 248:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 249:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 250:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 251:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 252:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 253:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 254:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 255:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_GetDescriptor(void)
 256:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 257:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	void*    DescriptorPointer;
 258:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint16_t DescriptorSize;
 259:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 260:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 261:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t  DescriptorAddressSpace;
 262:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 263:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 264:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 265:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 266:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 267:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		USB_Device_GetInternalSerialDescriptor();
 268:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 269:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 270:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 271:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 272:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 211               		.loc 1 272 0
 212 00c2 AE01      		movw r20,r28
 213 00c4 4F5F      		subi r20,-1
 214 00c6 5F4F      		sbci r21,-1
 215 00c8 6091 0000 		lds r22,USB_ControlRequest+4
 216 00cc 8091 0000 		lds r24,USB_ControlRequest+2
 217 00d0 9091 0000 		lds r25,USB_ControlRequest+2+1
 218 00d4 0E94 0000 		call CALLBACK_USB_GetDescriptor
 219               	.LVL19:
 220 00d8 BC01      		movw r22,r24
 221               	.LVL20:
 222 00da 892B      		or r24,r25
 223 00dc 01F4      		brne .+2
 224 00de 00C0      		rjmp .L11
 225               	.LBB83:
 226               	.LBB84:
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 227               		.loc 2 442 0
 228 00e0 9091 E800 		lds r25,232
 229 00e4 977F      		andi r25,lo8(-9)
 230 00e6 9093 E800 		sts 232,r25
 231               	.LBE84:
 232               	.LBE83:
 273:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                                                 &DescriptorPointer
 274:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 275:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                                                 , &DescriptorAddressSpace
 276:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 277:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 													 )) == NO_DESCRIPTOR)
 278:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 279:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 280:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 281:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 282:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 283:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 284:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if defined(USE_RAM_DESCRIPTORS)
 285:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 233               		.loc 1 285 0
 234 00ea 8981      		ldd r24,Y+1
 235 00ec 9A81      		ldd r25,Y+2
 236 00ee 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 237               	.LVL21:
 238               	.LBB85:
 239               	.LBB86:
 471:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 240               		.loc 2 471 0
 241 00f2 8091 E800 		lds r24,232
 242 00f6 8B7F      		andi r24,lo8(-5)
 243 00f8 8093 E800 		sts 232,r24
 244 00fc 00C0      		rjmp .L11
 245               	.LVL22:
 246               	.L9:
 247               	.LBE86:
 248               	.LBE85:
 249               	.LBE82:
 250               	.LBE81:
  98:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 251               		.loc 1 98 0
 252 00fe 8038      		cpi r24,lo8(-128)
 253 0100 01F0      		breq .+2
 254 0102 00C0      		rjmp .L3
 255               	.LBB87:
 256               	.LBB88:
 257               	.LBB89:
 258               	.LBB90:
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 259               		.loc 2 442 0
 260 0104 8091 E800 		lds r24,232
 261               	.LVL23:
 262 0108 877F      		andi r24,lo8(-9)
 263 010a 8093 E800 		sts 232,r24
 264               	.LVL24:
 265               	.LBE90:
 266               	.LBE89:
 205:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 267               		.loc 1 205 0
 268 010e 8091 0000 		lds r24,USB_ConfigurationNumber
 269               	.LVL25:
 270               	.LBB91:
 271               	.LBB92:
 551:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 552:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 553:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 562:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 272               		.loc 2 562 0
 273 0112 8093 F100 		sts 241,r24
 274               	.LVL26:
 275               	.LBE92:
 276               	.LBE91:
 277               	.LBB93:
 278               	.LBB94:
 456:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 279               		.loc 2 456 0
 280 0116 8091 E800 		lds r24,232
 281 011a 8E7F      		andi r24,lo8(-2)
 282 011c 8093 E800 		sts 232,r24
 283               	.LBE94:
 284               	.LBE93:
 208:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 285               		.loc 1 208 0
 286 0120 0E94 0000 		call Endpoint_ClearStatusStage
 287               	.LVL27:
 288 0124 00C0      		rjmp .L11
 289               	.LVL28:
 290               	.L10:
 291               	.LBE88:
 292               	.LBE87:
 106:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 293               		.loc 1 106 0
 294 0126 8111      		cpse r24,__zero_reg__
 295 0128 00C0      		rjmp .L3
 296               	.LBB95:
 297               	.LBB96:
 149:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  return;
 298               		.loc 1 149 0
 299 012a 9091 0000 		lds r25,USB_ControlRequest+2
 300 012e 9230      		cpi r25,lo8(2)
 301 0130 00F0      		brlo .+2
 302 0132 00C0      		rjmp .L11
 303               	.LBB97:
 304               	.LBB98:
 442:../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 305               		.loc 2 442 0
 306 0134 8091 E800 		lds r24,232
 307               	.LVL29:
 308 0138 877F      		andi r24,lo8(-9)
 309 013a 8093 E800 		sts 232,r24
 310               	.LVL30:
 311               	.LBE98:
 312               	.LBE97:
 192:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 313               		.loc 1 192 0
 314 013e 9093 0000 		sts USB_ConfigurationNumber,r25
 194:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 315               		.loc 1 194 0
 316 0142 0E94 0000 		call Endpoint_ClearStatusStage
 317               	.LVL31:
 196:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 318               		.loc 1 196 0
 319 0146 8091 0000 		lds r24,USB_ConfigurationNumber
 320 014a 8111      		cpse r24,__zero_reg__
 321 014c 00C0      		rjmp .L20
 322 014e 83E0      		ldi r24,lo8(3)
 323               	.L17:
 324 0150 8EBB      		out 0x1e,r24
 198:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 325               		.loc 1 198 0
 326 0152 0E94 0000 		call EVENT_USB_Device_ConfigurationChanged
 327               	.LVL32:
 328 0156 00C0      		rjmp .L11
 329               	.L20:
 196:../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 330               		.loc 1 196 0
 331 0158 84E0      		ldi r24,lo8(4)
 332 015a 00C0      		rjmp .L17
 333               	.LBE96:
 334               	.LBE95:
 335               		.cfi_endproc
 336               	.LFE64:
 338               		.comm	USB_ConfigurationNumber,1,1
 339               		.text
 340               	.Letext0:
 341               		.file 4 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/stdint.h"
 342               		.file 5 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 343               		.file 6 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/USBTask.h"
 344               		.file 7 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/DeviceStandardReq.h"
 345               		.file 8 "../LUFA_100807//LUFA/Drivers/USB/HighLevel/Events.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeviceStandardReq.c
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:4      *ABS*:000000000000003f __SREG__
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/f9/r06qpml11pqf6b9zf642yr_h0000gn/T//ccDGPmDj.s:13     .text.USB_Device_ProcessControlRequest:0000000000000000 USB_Device_ProcessControlRequest
                            *COM*:0000000000000001 USB_ConfigurationNumber

UNDEFINED SYMBOLS
USB_ControlRequest
__tablejump2__
EVENT_USB_Device_UnhandledControlRequest
Endpoint_ClearStatusStage
CALLBACK_USB_GetDescriptor
Endpoint_Write_Control_Stream_LE
EVENT_USB_Device_ConfigurationChanged
__do_clear_bss
