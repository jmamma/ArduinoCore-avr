
optiboot_atmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0003ff1b  000003af  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031b  0003fc00  0003fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0003fffe  0003fffe  000003af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e7  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b1  00000000  00000000  00000bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043c  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026f  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000488  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
   3fc00:	01 c0       	rjmp	.+2      	; 0x3fc04 <main>
   3fc02:	22 c1       	rjmp	.+580    	; 0x3fe48 <do_spm>

0003fc04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
   3fc04:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
   3fc06:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
   3fc08:	88 23       	and	r24, r24
   3fc0a:	69 f0       	breq	.+26     	; 0x3fc26 <main+0x22>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
   3fc0c:	98 2f       	mov	r25, r24
   3fc0e:	9a 70       	andi	r25, 0x0A	; 10
   3fc10:	92 30       	cpi	r25, 0x02	; 2
   3fc12:	49 f0       	breq	.+18     	; 0x3fc26 <main+0x22>
      if (WDRF_CLR_REASONS) {
   3fc14:	81 ff       	sbrs	r24, 1
   3fc16:	02 c0       	rjmp	.+4      	; 0x3fc1c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
   3fc18:	97 ef       	ldi	r25, 0xF7	; 247
   3fc1a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
   3fc1c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
   3fc1e:	80 e0       	ldi	r24, 0x00	; 0
   3fc20:	fe d0       	rcall	.+508    	; 0x3fe1e <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
   3fc22:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   3fc26:	85 e0       	ldi	r24, 0x05	; 5
   3fc28:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   3fc2c:	82 e0       	ldi	r24, 0x02	; 2
   3fc2e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   3fc32:	88 e1       	ldi	r24, 0x18	; 24
   3fc34:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   3fc38:	86 e0       	ldi	r24, 0x06	; 6
   3fc3a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
  UART_SRL = (uint8_t)BAUD_SETTING;
   3fc3e:	80 e1       	ldi	r24, 0x10	; 16
   3fc40:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
   3fc44:	8e e0       	ldi	r24, 0x0E	; 14
   3fc46:	eb d0       	rcall	.+470    	; 0x3fe1e <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   3fc48:	27 9a       	sbi	0x04, 7	; 4
   3fc4a:	86 e0       	ldi	r24, 0x06	; 6
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
   3fc4c:	20 e3       	ldi	r18, 0x30	; 48
   3fc4e:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   3fc50:	91 e0       	ldi	r25, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
   3fc52:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
   3fc56:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    TIFR1 = _BV(TOV1);
   3fc5a:	96 bb       	out	0x16, r25	; 22
    while (!(TIFR1 & _BV(TOV1)));
   3fc5c:	b0 9b       	sbis	0x16, 0	; 22
   3fc5e:	fe cf       	rjmp	.-4      	; 0x3fc5c <main+0x58>
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);  // Newer AVRs can toggle by writing PINx
   3fc60:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   3fc62:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
   3fc64:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3fc68:	47 fd       	sbrc	r20, 7
   3fc6a:	02 c0       	rjmp	.+4      	; 0x3fc70 <main+0x6c>
   3fc6c:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
   3fc6e:	89 f7       	brne	.-30     	; 0x3fc52 <main+0x4e>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
   3fc70:	43 e0       	ldi	r20, 0x03	; 3
   3fc72:	d4 2e       	mov	r13, r20
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
   3fc74:	55 e0       	ldi	r21, 0x05	; 5
   3fc76:	c5 2e       	mov	r12, r21
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
   3fc78:	61 e1       	ldi	r22, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   3fc7a:	76 2e       	mov	r7, r22

    if (ch == STK_GET_PARAMETER) {
   3fc7c:	c4 d0       	rcall	.+392    	; 0x3fe06 <getch>
      unsigned char which = getch();
   3fc7e:	81 34       	cpi	r24, 0x41	; 65
   3fc80:	71 f4       	brne	.+28     	; 0x3fc9e <main+0x9a>
   3fc82:	c1 d0       	rcall	.+386    	; 0x3fe06 <getch>
      verifySpace();
   3fc84:	c8 2f       	mov	r28, r24
   3fc86:	d1 d0       	rcall	.+418    	; 0x3fe2a <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
   3fc88:	82 e0       	ldi	r24, 0x02	; 2
      verifySpace();
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
   3fc8a:	c2 38       	cpi	r28, 0x82	; 130
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
   3fc8c:	21 f0       	breq	.+8      	; 0x3fc96 <main+0x92>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
   3fc8e:	88 e0       	ldi	r24, 0x08	; 8
      } else {
        /*
         * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
   3fc90:	c1 38       	cpi	r28, 0x81	; 129
   3fc92:	09 f0       	breq	.+2      	; 0x3fc96 <main+0x92>
   3fc94:	83 e0       	ldi	r24, 0x03	; 3
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
   3fc96:	b0 d0       	rcall	.+352    	; 0x3fdf8 <putch>
   3fc98:	80 e1       	ldi	r24, 0x10	; 16
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   3fc9a:	ae d0       	rcall	.+348    	; 0x3fdf8 <putch>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
   3fc9c:	ef cf       	rjmp	.-34     	; 0x3fc7c <main+0x78>
   3fc9e:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
   3fca0:	19 f4       	brne	.+6      	; 0x3fca8 <main+0xa4>
    }
    else if (ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
   3fca2:	84 e1       	ldi	r24, 0x14	; 20
   3fca4:	ca d0       	rcall	.+404    	; 0x3fe3a <getNch>
    }
    else if (ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if (ch == STK_SET_DEVICE_EXT) {
   3fca6:	f8 cf       	rjmp	.-16     	; 0x3fc98 <main+0x94>
      // SET DEVICE EXT is ignored
      getNch(5);
   3fca8:	85 34       	cpi	r24, 0x45	; 69
   3fcaa:	11 f4       	brne	.+4      	; 0x3fcb0 <main+0xac>
    }
    else if (ch == STK_LOAD_ADDRESS) {
   3fcac:	85 e0       	ldi	r24, 0x05	; 5
   3fcae:	fa cf       	rjmp	.-12     	; 0x3fca4 <main+0xa0>
      // LOAD ADDRESS
      address.bytes[0] = getch();
   3fcb0:	85 35       	cpi	r24, 0x55	; 85
   3fcb2:	81 f4       	brne	.+32     	; 0x3fcd4 <main+0xd0>
   3fcb4:	a8 d0       	rcall	.+336    	; 0x3fe06 <getch>
      address.bytes[1] = getch();
   3fcb6:	08 2f       	mov	r16, r24
   3fcb8:	a6 d0       	rcall	.+332    	; 0x3fe06 <getch>
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (address.bytes[1] & 0x80) {
   3fcba:	18 2f       	mov	r17, r24
   3fcbc:	87 ff       	sbrs	r24, 7
        RAMPZ |= 0x01;
   3fcbe:	07 c0       	rjmp	.+14     	; 0x3fcce <main+0xca>
   3fcc0:	8b b7       	in	r24, 0x3b	; 59
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
   3fcc2:	81 60       	ori	r24, 0x01	; 1
   3fcc4:	8b bf       	out	0x3b, r24	; 59
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   3fcc6:	00 0f       	add	r16, r16
   3fcc8:	11 1f       	adc	r17, r17
      // Transfer top bit to LSB in RAMPZ
      if (address.bytes[1] & 0x80) {
        RAMPZ |= 0x01;
      }
      else {
        RAMPZ &= 0xFE;
   3fcca:	af d0       	rcall	.+350    	; 0x3fe2a <verifySpace>
   3fccc:	e5 cf       	rjmp	.-54     	; 0x3fc98 <main+0x94>
   3fcce:	8b b7       	in	r24, 0x3b	; 59
      }
#endif
      address.word *= 2; // Convert from word address to byte address
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
   3fcd0:	8e 7f       	andi	r24, 0xFE	; 254
   3fcd2:	f8 cf       	rjmp	.-16     	; 0x3fcc4 <main+0xc0>
#ifdef RAMPZ
      // LOAD_EXTENDED_ADDRESS is needed in STK_UNIVERSAL for addressing more than 128kB
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
   3fcd4:	86 35       	cpi	r24, 0x56	; 86
   3fcd6:	81 f4       	brne	.+32     	; 0x3fcf8 <main+0xf4>
   3fcd8:	96 d0       	rcall	.+300    	; 0x3fe06 <getch>
        // get address
        getch();  // get '0'
   3fcda:	8d 34       	cpi	r24, 0x4D	; 77
   3fcdc:	59 f4       	brne	.+22     	; 0x3fcf4 <main+0xf0>
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAMPZ
   3fcde:	93 d0       	rcall	.+294    	; 0x3fe06 <getch>
   3fce0:	cb b7       	in	r28, 0x3b	; 59
   3fce2:	91 d0       	rcall	.+290    	; 0x3fe06 <getch>
   3fce4:	c1 70       	andi	r28, 0x01	; 1
   3fce6:	88 0f       	add	r24, r24
   3fce8:	8c 2b       	or	r24, r28
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
   3fcea:	8b bf       	out	0x3b, r24	; 59
        putch(0x00);
   3fcec:	81 e0       	ldi	r24, 0x01	; 1
   3fcee:	a5 d0       	rcall	.+330    	; 0x3fe3a <getNch>
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
   3fcf0:	80 e0       	ldi	r24, 0x00	; 0
   3fcf2:	d1 cf       	rjmp	.-94     	; 0x3fc96 <main+0x92>
      getNch(4);
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
   3fcf4:	83 e0       	ldi	r24, 0x03	; 3
   3fcf6:	fb cf       	rjmp	.-10     	; 0x3fcee <main+0xea>
   3fcf8:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   3fcfa:	09 f0       	breq	.+2      	; 0x3fcfe <main+0xfa>
   3fcfc:	4b c0       	rjmp	.+150    	; 0x3fd94 <main+0x190>
   3fcfe:	83 d0       	rcall	.+262    	; 0x3fe06 <getch>
   3fd00:	c8 2f       	mov	r28, r24
   3fd02:	d0 e0       	ldi	r29, 0x00	; 0
   3fd04:	dc 2f       	mov	r29, r28
   3fd06:	cc 27       	eor	r28, r28
   3fd08:	7e d0       	rcall	.+252    	; 0x3fe06 <getch>
      savelength = length;
      desttype = getch();
   3fd0a:	c8 2b       	or	r28, r24
   3fd0c:	7c d0       	rcall	.+248    	; 0x3fe06 <getch>
   3fd0e:	68 2e       	mov	r6, r24
   3fd10:	5e 01       	movw	r10, r28
   3fd12:	8e ef       	ldi	r24, 0xFE	; 254

      // read a page worth of contents
      bufPtr = buff.bptr;
   3fd14:	b8 1a       	sub	r11, r24
   3fd16:	e1 2c       	mov	r14, r1
   3fd18:	22 e0       	ldi	r18, 0x02	; 2
      do *bufPtr++ = getch();
   3fd1a:	f2 2e       	mov	r15, r18
   3fd1c:	47 01       	movw	r8, r14
   3fd1e:	ef ef       	ldi	r30, 0xFF	; 255
   3fd20:	8e 1a       	sub	r8, r30
   3fd22:	9e 0a       	sbc	r9, r30
   3fd24:	70 d0       	rcall	.+224    	; 0x3fe06 <getch>
   3fd26:	f7 01       	movw	r30, r14
   3fd28:	80 83       	st	Z, r24
   3fd2a:	74 01       	movw	r14, r8
      while (--length);
   3fd2c:	8a 14       	cp	r8, r10
   3fd2e:	9b 04       	cpc	r9, r11
   3fd30:	a9 f7       	brne	.-22     	; 0x3fd1c <main+0x118>

      // Read command terminator, start reply
      verifySpace();
   3fd32:	7b d0       	rcall	.+246    	; 0x3fe2a <verifySpace>
   3fd34:	f5 e4       	ldi	r31, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
   3fd36:	6f 16       	cp	r6, r31
   3fd38:	51 f1       	breq	.+84     	; 0x3fd8e <main+0x18a>
   3fd3a:	f8 01       	movw	r30, r16
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
   3fd3c:	d7 be       	out	0x37, r13	; 55
   3fd3e:	e8 95       	spm
   3fd40:	07 b6       	in	r0, 0x37	; 55
        boot_spm_busy_wait();
   3fd42:	00 fc       	sbrc	r0, 0
   3fd44:	fd cf       	rjmp	.-6      	; 0x3fd40 <main+0x13c>
   3fd46:	f8 01       	movw	r30, r16
     * the default rather than checking for the correct code, we save
     * space on chips that don't support any other memory types.
     */
    {
      // Copy buffer into programming buffer
      uint16_t addrPtr = address.word;
   3fd48:	a0 e0       	ldi	r26, 0x00	; 0
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
        boot_spm_busy_wait();
   3fd4a:	b2 e0       	ldi	r27, 0x02	; 2
   3fd4c:	81 e0       	ldi	r24, 0x01	; 1

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
   3fd4e:	2d 91       	ld	r18, X+
   3fd50:	3d 91       	ld	r19, X+
   3fd52:	09 01       	movw	r0, r18
   3fd54:	87 bf       	out	0x37, r24	; 55
   3fd56:	e8 95       	spm
   3fd58:	11 24       	eor	r1, r1
        addrPtr += 2;
   3fd5a:	32 96       	adiw	r30, 0x02	; 2
      } while (len -= 2);
   3fd5c:	22 97       	sbiw	r28, 0x02	; 2
   3fd5e:	b9 f7       	brne	.-18     	; 0x3fd4e <main+0x14a>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
   3fd60:	f8 01       	movw	r30, r16
   3fd62:	c7 be       	out	0x37, r12	; 55
   3fd64:	e8 95       	spm
      boot_spm_busy_wait();
   3fd66:	07 b6       	in	r0, 0x37	; 55
   3fd68:	00 fc       	sbrc	r0, 0
   3fd6a:	fd cf       	rjmp	.-6      	; 0x3fd66 <main+0x162>
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
   3fd6c:	77 be       	out	0x37, r7	; 55
   3fd6e:	e8 95       	spm
{
  switch (memtype) {
  case 'E': // EEPROM
#if SUPPORT_EEPROM || BIGBOOT
    while (len--) {
      eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
   3fd70:	93 cf       	rjmp	.-218    	; 0x3fc98 <main+0x94>
   3fd72:	60 81       	ld	r22, Z
   3fd74:	c7 01       	movw	r24, r14
   3fd76:	80 0f       	add	r24, r16
   3fd78:	91 1f       	adc	r25, r17
   3fd7a:	7e d0       	rcall	.+252    	; 0x3fe78 <eeprom_write_byte>
   3fd7c:	8f ef       	ldi	r24, 0xFF	; 255
   3fd7e:	e8 1a       	sub	r14, r24
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
  case 'E': // EEPROM
#if SUPPORT_EEPROM || BIGBOOT
    while (len--) {
   3fd80:	f8 0a       	sbc	r15, r24
   3fd82:	f7 01       	movw	r30, r14
   3fd84:	fe 5f       	subi	r31, 0xFE	; 254
   3fd86:	ce 15       	cp	r28, r14
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
   3fd88:	df 05       	cpc	r29, r15
   3fd8a:	99 f7       	brne	.-26     	; 0x3fd72 <main+0x16e>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
   3fd8c:	85 cf       	rjmp	.-246    	; 0x3fc98 <main+0x94>
   3fd8e:	f1 2c       	mov	r15, r1
      uint8_t desttype;
      GETLENGTH(length);
   3fd90:	e1 2c       	mov	r14, r1
   3fd92:	f7 cf       	rjmp	.-18     	; 0x3fd82 <main+0x17e>
   3fd94:	84 37       	cpi	r24, 0x74	; 116
   3fd96:	09 f5       	brne	.+66     	; 0x3fdda <main+0x1d6>
   3fd98:	36 d0       	rcall	.+108    	; 0x3fe06 <getch>
   3fd9a:	c8 2f       	mov	r28, r24
   3fd9c:	d0 e0       	ldi	r29, 0x00	; 0
   3fd9e:	dc 2f       	mov	r29, r28

      desttype = getch();
   3fda0:	cc 27       	eor	r28, r28
   3fda2:	31 d0       	rcall	.+98     	; 0x3fe06 <getch>
   3fda4:	c8 2b       	or	r28, r24

      verifySpace();
   3fda6:	2f d0       	rcall	.+94     	; 0x3fe06 <getch>
   3fda8:	b8 2e       	mov	r11, r24

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
  uint8_t ch;

  switch (memtype) {
   3fdaa:	3f d0       	rcall	.+126    	; 0x3fe2a <verifySpace>
   3fdac:	78 01       	movw	r14, r16
   3fdae:	f5 e4       	ldi	r31, 0x45	; 69

#if SUPPORT_EEPROM || BIGBOOT
  case 'E': // EEPROM
    do {
      putch(eeprom_read_byte((address.bptr++)));
   3fdb0:	bf 12       	cpse	r11, r31
   3fdb2:	0c c0       	rjmp	.+24     	; 0x3fdcc <main+0x1c8>
   3fdb4:	c0 0f       	add	r28, r16
   3fdb6:	d1 1f       	adc	r29, r17
   3fdb8:	c7 01       	movw	r24, r14
   3fdba:	56 d0       	rcall	.+172    	; 0x3fe68 <eeprom_read_byte>
   3fdbc:	1d d0       	rcall	.+58     	; 0x3fdf8 <putch>
    } while (--length);
   3fdbe:	8f ef       	ldi	r24, 0xFF	; 255
   3fdc0:	e8 1a       	sub	r14, r24
   3fdc2:	f8 0a       	sbc	r15, r24
   3fdc4:	ce 15       	cp	r28, r14
      // Since RAMPZ should already be set, we need to use EPLM directly.
      // Also, we can use the autoincrement version of lpm to update "address"
      //      do putch(pgm_read_byte_near(address++));
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
   3fdc6:	df 05       	cpc	r29, r15
   3fdc8:	b9 f7       	brne	.-18     	; 0x3fdb8 <main+0x1b4>
   3fdca:	66 cf       	rjmp	.-308    	; 0x3fc98 <main+0x94>
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
   3fdcc:	f7 01       	movw	r30, r14
   3fdce:	87 91       	elpm	r24, Z+
    } while (--length);
   3fdd0:	7f 01       	movw	r14, r30
   3fdd2:	12 d0       	rcall	.+36     	; 0x3fdf8 <putch>
   3fdd4:	21 97       	sbiw	r28, 0x01	; 1

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
   3fdd6:	d1 f7       	brne	.-12     	; 0x3fdcc <main+0x1c8>
   3fdd8:	5f cf       	rjmp	.-322    	; 0x3fc98 <main+0x94>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   3fdda:	85 37       	cpi	r24, 0x75	; 117
   3fddc:	39 f4       	brne	.+14     	; 0x3fdec <main+0x1e8>
      putch(SIGNATURE_0);
   3fdde:	25 d0       	rcall	.+74     	; 0x3fe2a <verifySpace>
   3fde0:	8e e1       	ldi	r24, 0x1E	; 30
   3fde2:	0a d0       	rcall	.+20     	; 0x3fdf8 <putch>
      putch(SIGNATURE_1);
   3fde4:	88 e9       	ldi	r24, 0x98	; 152
   3fde6:	08 d0       	rcall	.+16     	; 0x3fdf8 <putch>
   3fde8:	81 e0       	ldi	r24, 0x01	; 1
      putch(SIGNATURE_2);
   3fdea:	55 cf       	rjmp	.-342    	; 0x3fc96 <main+0x92>
   3fdec:	81 35       	cpi	r24, 0x51	; 81
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   3fdee:	09 f0       	breq	.+2      	; 0x3fdf2 <main+0x1ee>
   3fdf0:	6c cf       	rjmp	.-296    	; 0x3fcca <main+0xc6>
   3fdf2:	88 e0       	ldi	r24, 0x08	; 8
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   3fdf4:	14 d0       	rcall	.+40     	; 0x3fe1e <watchdogConfig>
   3fdf6:	69 cf       	rjmp	.-302    	; 0x3fcca <main+0xc6>

0003fdf8 <putch>:
   3fdf8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
   3fdfc:	95 ff       	sbrs	r25, 5
   3fdfe:	fc cf       	rjmp	.-8      	; 0x3fdf8 <putch>
  UART_UDR = ch;
   3fe00:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
   3fe04:	08 95       	ret

0003fe06 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
   3fe06:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3fe0a:	87 ff       	sbrs	r24, 7
   3fe0c:	fc cf       	rjmp	.-8      	; 0x3fe06 <getch>
  if (!(UART_SRA & _BV(FE0))) {
   3fe0e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3fe12:	84 fd       	sbrc	r24, 4
   3fe14:	01 c0       	rjmp	.+2      	; 0x3fe18 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   3fe16:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
   3fe18:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
   3fe1c:	08 95       	ret

0003fe1e <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
   3fe1e:	e0 e6       	ldi	r30, 0x60	; 96
   3fe20:	f0 e0       	ldi	r31, 0x00	; 0
   3fe22:	98 e1       	ldi	r25, 0x18	; 24
   3fe24:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
   3fe26:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
   3fe28:	08 95       	ret

0003fe2a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   3fe2a:	ed df       	rcall	.-38     	; 0x3fe06 <getch>
   3fe2c:	80 32       	cpi	r24, 0x20	; 32
   3fe2e:	19 f0       	breq	.+6      	; 0x3fe36 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   3fe30:	88 e0       	ldi	r24, 0x08	; 8
   3fe32:	f5 df       	rcall	.-22     	; 0x3fe1e <watchdogConfig>
   3fe34:	ff cf       	rjmp	.-2      	; 0x3fe34 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
   3fe36:	84 e1       	ldi	r24, 0x14	; 20
   3fe38:	df cf       	rjmp	.-66     	; 0x3fdf8 <putch>

0003fe3a <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
   3fe3a:	cf 93       	push	r28
   3fe3c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   3fe3e:	e3 df       	rcall	.-58     	; 0x3fe06 <getch>
   3fe40:	c1 50       	subi	r28, 0x01	; 1
   3fe42:	e9 f7       	brne	.-6      	; 0x3fe3e <getNch+0x4>
  verifySpace();
}
   3fe44:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   3fe46:	f1 cf       	rjmp	.-30     	; 0x3fe2a <verifySpace>

0003fe48 <do_spm>:
   3fe48:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
   3fe4a:	0a 01       	movw	r0, r20
   3fe4c:	67 bf       	out	0x37, r22	; 55
   3fe4e:	e8 95       	spm
   3fe50:	11 24       	eor	r1, r1
   3fe52:	07 b6       	in	r0, 0x37	; 55
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
   3fe54:	00 fc       	sbrc	r0, 0
   3fe56:	fd cf       	rjmp	.-6      	; 0x3fe52 <do_spm+0xa>
   3fe58:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   3fe5a:	29 f0       	breq	.+10     	; 0x3fe66 <do_spm+0x1e>
   3fe5c:	45 2b       	or	r20, r21
   3fe5e:	19 f4       	brne	.+6      	; 0x3fe66 <do_spm+0x1e>
   3fe60:	81 e1       	ldi	r24, 0x11	; 17
    // Reenable read access to flash
    __boot_rww_enable_short();
   3fe62:	87 bf       	out	0x37, r24	; 55
   3fe64:	e8 95       	spm
   3fe66:	08 95       	ret

0003fe68 <eeprom_read_byte>:
  }
#endif
}
   3fe68:	f9 99       	sbic	0x1f, 1	; 31
   3fe6a:	fe cf       	rjmp	.-4      	; 0x3fe68 <eeprom_read_byte>
   3fe6c:	92 bd       	out	0x22, r25	; 34
   3fe6e:	81 bd       	out	0x21, r24	; 33
   3fe70:	f8 9a       	sbi	0x1f, 0	; 31
   3fe72:	99 27       	eor	r25, r25
   3fe74:	80 b5       	in	r24, 0x20	; 32
   3fe76:	08 95       	ret

0003fe78 <eeprom_write_byte>:
   3fe78:	26 2f       	mov	r18, r22

0003fe7a <eeprom_write_r18>:
   3fe7a:	f9 99       	sbic	0x1f, 1	; 31
   3fe7c:	fe cf       	rjmp	.-4      	; 0x3fe7a <eeprom_write_r18>
   3fe7e:	1f ba       	out	0x1f, r1	; 31
   3fe80:	92 bd       	out	0x22, r25	; 34
   3fe82:	81 bd       	out	0x21, r24	; 33
   3fe84:	20 bd       	out	0x20, r18	; 32
   3fe86:	0f b6       	in	r0, 0x3f	; 63
   3fe88:	f8 94       	cli
   3fe8a:	fa 9a       	sbi	0x1f, 2	; 31
   3fe8c:	f9 9a       	sbi	0x1f, 1	; 31
   3fe8e:	0f be       	out	0x3f, r0	; 63
   3fe90:	01 96       	adiw	r24, 0x01	; 1
   3fe92:	08 95       	ret

0003fe94 <f_delimit>:
   3fe94:	ff                                                  .

0003fe95 <f_version>:
   3fe95:	56 65 72 73 69 6f 6e 3d 38 2e 32 00                 Version=8.2.

0003fea1 <f_device>:
   3fea1:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 32 35 36     Device=atmega256
   3feb1:	30 00                                               0.

0003feb3 <fF_CPU>:
   3feb3:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0003fec3 <fBIGBOOT>:
   3fec3:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0003fecd <f_date>:
   3fecd:	42 75 69 6c 74 3a 4e 6f 76 20 20 35 20 32 30 32     Built:Nov  5 202
   3fedd:	31 3a 31 32 3a 30 38 3a 32 30 00                    1:12:08:20.

0003fee8 <fUART>:
   3fee8:	55 41 52 54 3d 30 00                                UART=0.

0003feef <fBAUD_RATE>:
   3feef:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0003ff00 <f_LED>:
   3ff00:	4c 45 44 3d 42 37 00                                LED=B7.

0003ff07 <fLED_START_FLASHES>:
   3ff07:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
   3ff17:	53 3d 33 00                                         S=3.
