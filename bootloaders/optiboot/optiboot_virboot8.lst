
optiboot_virboot8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001fde  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000663  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c0  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000427  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000205  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035d  00000000  00000000  00001321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	1d c1       	rjmp	.+570    	; 0x1fbe <do_spm>

00001d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    1d84:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) ||  \
  defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) ||  \
  defined (__AVR_ATmega32__) || defined (__AVR_ATmega64__)  ||  \
  defined (__AVR_ATmega128__) || defined (__AVR_ATmega162__)
  SP=RAMEND;  // This is done by hardware reset on newer chips
    1d86:	8f e5       	ldi	r24, 0x5F	; 95
    1d88:	94 e0       	ldi	r25, 0x04	; 4
    1d8a:	9e bf       	out	0x3e, r25	; 62
    1d8c:	8d bf       	out	0x3d, r24	; 61
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    1d8e:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1d90:	88 23       	and	r24, r24
    1d92:	71 f0       	breq	.+28     	; 0x1db0 <main+0x2c>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    1d94:	98 2f       	mov	r25, r24
    1d96:	9a 70       	andi	r25, 0x0A	; 10
    1d98:	92 30       	cpi	r25, 0x02	; 2
    1d9a:	51 f0       	breq	.+20     	; 0x1db0 <main+0x2c>
      if (WDRF_CLR_REASONS) {
    1d9c:	81 ff       	sbrs	r24, 1
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <main+0x20>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    1da0:	97 ef       	ldi	r25, 0xF7	; 247
    1da2:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    1da4:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	f7 d0       	rcall	.+494    	; 0x1f98 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    1daa:	ef e0       	ldi	r30, 0x0F	; 15
    1dac:	ff 27       	eor	r31, r31
    1dae:	09 94       	ijmp
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1db0:	85 e0       	ldi	r24, 0x05	; 5
    1db2:	8e bd       	out	0x2e, r24	; 46
#if (SOFT_UART == 0)
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega8515__) || \
  defined (__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || \
  defined (__AVR_ATmega32__)
#if (SINGLESPEED == 0)
  UCSRA = _BV(U2X); //Double speed mode USART
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	8b b9       	out	0x0b, r24	; 11
#endif //singlespeed
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1db8:	88 e1       	ldi	r24, 0x18	; 24
    1dba:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1dbc:	86 e8       	ldi	r24, 0x86	; 134
    1dbe:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)BAUD_SETTING;
    1dc0:	80 e1       	ldi	r24, 0x10	; 16
    1dc2:	89 b9       	out	0x09, r24	; 9
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    1dc4:	8e e0       	ldi	r24, 0x0E	; 14
    1dc6:	e8 d0       	rcall	.+464    	; 0x1f98 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1dc8:	bd 9a       	sbi	0x17, 5	; 23
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1dcc:	20 e3       	ldi	r18, 0x30	; 48
    1dce:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1dd0:	44 e0       	ldi	r20, 0x04	; 4
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    1dd2:	50 e2       	ldi	r21, 0x20	; 32
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1dd4:	3d bd       	out	0x2d, r19	; 45
    1dd6:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    1dd8:	48 bf       	out	0x38, r20	; 56
    while (!(TIFR1 & _BV(TOV1)));
    1dda:	08 b6       	in	r0, 0x38	; 56
    1ddc:	02 fe       	sbrs	r0, 2
    1dde:	fd cf       	rjmp	.-6      	; 0x1dda <main+0x56>
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    1de0:	98 b3       	in	r25, 0x18	; 24
    1de2:	95 27       	eor	r25, r21
    1de4:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1de6:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    1de8:	5f 99       	sbic	0x0b, 7	; 11
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <main+0x6c>
    1dec:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    1dee:	91 f7       	brne	.-28     	; 0x1dd4 <main+0x50>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	d9 2e       	mov	r13, r25

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1df4:	cc 24       	eor	r12, r12
    1df6:	c3 94       	inc	r12
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1df8:	25 e0       	ldi	r18, 0x05	; 5
    1dfa:	92 2e       	mov	r9, r18
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1dfc:	31 e1       	ldi	r19, 0x11	; 17
    1dfe:	83 2e       	mov	r8, r19
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
        rstVect1_sav = buff.bptr[rstVect1];
        addr16_t vect;
        vect.word = ((uint16_t)pre_main-1);
    1e00:	4f eb       	ldi	r20, 0xBF	; 191
    1e02:	e4 2e       	mov	r14, r20
    1e04:	4e e0       	ldi	r20, 0x0E	; 14
    1e06:	f4 2e       	mov	r15, r20
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1e08:	8f 2d       	mov	r24, r15
    1e0a:	80 6c       	ori	r24, 0xC0	; 192
    1e0c:	78 2e       	mov	r7, r24
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e0e:	bd d0       	rcall	.+378    	; 0x1f8a <getch>

    if (ch == STK_GET_PARAMETER) {
    1e10:	81 34       	cpi	r24, 0x41	; 65
    1e12:	71 f4       	brne	.+28     	; 0x1e30 <main+0xac>
      unsigned char which = getch();
    1e14:	ba d0       	rcall	.+372    	; 0x1f8a <getch>
    1e16:	18 2f       	mov	r17, r24
      verifySpace();
    1e18:	c3 d0       	rcall	.+390    	; 0x1fa0 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
      verifySpace();
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    1e1c:	12 38       	cpi	r17, 0x82	; 130
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <main+0xa4>
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    1e20:	88 e0       	ldi	r24, 0x08	; 8
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    1e22:	11 38       	cpi	r17, 0x81	; 129
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <main+0xa4>
      } else {
        /*
         * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	ac d0       	rcall	.+344    	; 0x1f82 <putch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	aa d0       	rcall	.+340    	; 0x1f82 <putch>
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e2e:	ef cf       	rjmp	.-34     	; 0x1e0e <main+0x8a>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    1e30:	82 34       	cpi	r24, 0x42	; 66
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <main+0xb6>
      // SET DEVICE is ignored
      getNch(20);
    1e34:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
    1e36:	bc d0       	rcall	.+376    	; 0x1fb0 <getNch>
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <main+0xa6>
    }
    else if (ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    1e3a:	85 34       	cpi	r24, 0x45	; 69
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <main+0xbe>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	fa cf       	rjmp	.-12     	; 0x1e36 <main+0xb2>
    }
    else if (ch == STK_LOAD_ADDRESS) {
    1e42:	85 35       	cpi	r24, 0x55	; 85
    1e44:	41 f4       	brne	.+16     	; 0x1e56 <main+0xd2>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1e46:	a1 d0       	rcall	.+322    	; 0x1f8a <getch>
    1e48:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1e4a:	9f d0       	rcall	.+318    	; 0x1f8a <getch>
    1e4c:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1e4e:	cc 0f       	add	r28, r28
    1e50:	dd 1f       	adc	r29, r29
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1e52:	a6 d0       	rcall	.+332    	; 0x1fa0 <verifySpace>
    1e54:	ea cf       	rjmp	.-44     	; 0x1e2a <main+0xa6>
      }
#endif
      address.word *= 2; // Convert from word address to byte address
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    1e56:	86 35       	cpi	r24, 0x56	; 86
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <main+0xde>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	a9 d0       	rcall	.+338    	; 0x1fb0 <getNch>
      putch(0x00);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	e3 cf       	rjmp	.-58     	; 0x1e28 <main+0xa4>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    1e62:	84 36       	cpi	r24, 0x64	; 100
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <main+0xe4>
    1e66:	55 c0       	rjmp	.+170    	; 0x1f12 <main+0x18e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1e68:	90 d0       	rcall	.+288    	; 0x1f8a <getch>
    1e6a:	8f d0       	rcall	.+286    	; 0x1f8a <getch>
    1e6c:	68 2e       	mov	r6, r24
      savelength = length;
      desttype = getch();
    1e6e:	8d d0       	rcall	.+282    	; 0x1f8a <getch>
    1e70:	58 2e       	mov	r5, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1e72:	46 2c       	mov	r4, r6
      savelength = length;
      desttype = getch();

      // read a page worth of contents
      bufPtr = buff.bptr;
    1e74:	00 e6       	ldi	r16, 0x60	; 96
    1e76:	10 e0       	ldi	r17, 0x00	; 0
      do *bufPtr++ = getch();
    1e78:	58 01       	movw	r10, r16
    1e7a:	ef ef       	ldi	r30, 0xFF	; 255
    1e7c:	ae 1a       	sub	r10, r30
    1e7e:	be 0a       	sbc	r11, r30
    1e80:	84 d0       	rcall	.+264    	; 0x1f8a <getch>
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 83       	st	Z, r24
      while (--length);
    1e86:	4a 94       	dec	r4
      savelength = length;
      desttype = getch();

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    1e88:	85 01       	movw	r16, r10
      while (--length);
    1e8a:	41 10       	cpse	r4, r1
    1e8c:	f5 cf       	rjmp	.-22     	; 0x1e78 <main+0xf4>

      // Read command terminator, start reply
      verifySpace();
    1e8e:	88 d0       	rcall	.+272    	; 0x1fa0 <verifySpace>
    {
#endif
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
    1e90:	20 97       	sbiw	r28, 0x00	; 0
    1e92:	f1 f4       	brne	.+60     	; 0x1ed0 <main+0x14c>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
    1e94:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <_edata>
    1e98:	30 93 e4 00 	sts	0x00E4, r19	; 0x8000e4 <_edata+0x84>
        rstVect1_sav = buff.bptr[rstVect1];
    1e9c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <_edata+0x1>
    1ea0:	20 93 e5 00 	sts	0x00E5, r18	; 0x8000e5 <_edata+0x85>
        // Instruction is a relative jump (rjmp), so recalculate.
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
    1ea4:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <_edata>
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1ea8:	70 92 61 00 	sts	0x0061, r7	; 0x800061 <_edata+0x1>
#ifdef KeepBracesMatched
      {
#endif

        // Save old values for Verify
        saveVect0_sav = buff.bptr[saveVect0];
    1eac:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <_edata+0x1e>
    1eb0:	40 93 e6 00 	sts	0x00E6, r20	; 0x8000e6 <_edata+0x86>
        saveVect1_sav = buff.bptr[saveVect1];
    1eb4:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <_edata+0x1f>
    1eb8:	40 93 e7 00 	sts	0x00E7, r20	; 0x8000e7 <_edata+0x87>

        vect.bytes[0] = rstVect0_sav;
    1ebc:	83 2f       	mov	r24, r19
        vect.bytes[1] = rstVect1_sav;
    1ebe:	92 2f       	mov	r25, r18
        vect.word = (vect.word-save_vect_num); //substract 'save' interrupt position
    1ec0:	0f 97       	sbiw	r24, 0x0f	; 15
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0] = vect.bytes[0];
    1ec2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <_edata+0x1e>
        buff.bptr[saveVect1] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
    1ec6:	89 2f       	mov	r24, r25
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	80 6c       	ori	r24, 0xC0	; 192
    1ecc:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <_edata+0x1f>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    1ed0:	f5 e4       	ldi	r31, 0x45	; 69
    1ed2:	5f 12       	cpse	r5, r31
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <main+0x154>
    1ed6:	ff cf       	rjmp	.-2      	; 0x1ed6 <main+0x152>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	d7 be       	out	0x37, r13	; 55
    1edc:	e8 95       	spm
        boot_spm_busy_wait();
    1ede:	07 b6       	in	r0, 0x37	; 55
    1ee0:	00 fc       	sbrc	r0, 0
    1ee2:	fd cf       	rjmp	.-6      	; 0x1ede <main+0x15a>
     * the default rather than checking for the correct code, we save
     * space on chips that don't support any other memory types.
     */
    {
      // Copy buffer into programming buffer
      uint16_t addrPtr = address.word;
    1ee4:	fe 01       	movw	r30, r28
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
        boot_spm_busy_wait();
    1ee6:	a0 e6       	ldi	r26, 0x60	; 96
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1eea:	8d 91       	ld	r24, X+
    1eec:	9d 91       	ld	r25, X+
    1eee:	0c 01       	movw	r0, r24
    1ef0:	c7 be       	out	0x37, r12	; 55
    1ef2:	e8 95       	spm
    1ef4:	11 24       	eor	r1, r1
        addrPtr += 2;
    1ef6:	32 96       	adiw	r30, 0x02	; 2
      } while (len -= 2);
    1ef8:	6a 94       	dec	r6
    1efa:	6a 94       	dec	r6
    1efc:	61 10       	cpse	r6, r1
    1efe:	f5 cf       	rjmp	.-22     	; 0x1eea <main+0x166>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1f00:	fe 01       	movw	r30, r28
    1f02:	97 be       	out	0x37, r9	; 55
    1f04:	e8 95       	spm
      boot_spm_busy_wait();
    1f06:	07 b6       	in	r0, 0x37	; 55
    1f08:	00 fc       	sbrc	r0, 0
    1f0a:	fd cf       	rjmp	.-6      	; 0x1f06 <main+0x182>
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1f0c:	87 be       	out	0x37, r8	; 55
    1f0e:	e8 95       	spm
    1f10:	8c cf       	rjmp	.-232    	; 0x1e2a <main+0xa6>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    1f12:	84 37       	cpi	r24, 0x74	; 116
    1f14:	39 f5       	brne	.+78     	; 0x1f64 <main+0x1e0>
      uint8_t desttype;
      GETLENGTH(length);
    1f16:	39 d0       	rcall	.+114    	; 0x1f8a <getch>
    1f18:	38 d0       	rcall	.+112    	; 0x1f8a <getch>
    1f1a:	b8 2e       	mov	r11, r24

      desttype = getch();
    1f1c:	36 d0       	rcall	.+108    	; 0x1f8a <getch>

      verifySpace();
    1f1e:	40 d0       	rcall	.+128    	; 0x1fa0 <verifySpace>
    1f20:	8e 01       	movw	r16, r28
#endif
  default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
      // Undo vector patch in bottom page so verify passes
      if (address.word == rstVect0) ch = rstVect0_sav;
    1f22:	01 15       	cp	r16, r1
    1f24:	11 05       	cpc	r17, r1
    1f26:	49 f4       	brne	.+18     	; 0x1f3a <main+0x1b6>
    1f28:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <_edata+0x84>
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
    1f2c:	2a d0       	rcall	.+84     	; 0x1f82 <putch>
    } while (--length);
    1f2e:	ba 94       	dec	r11
    1f30:	0f 5f       	subi	r16, 0xFF	; 255
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	b1 10       	cpse	r11, r1
    1f36:	f5 cf       	rjmp	.-22     	; 0x1f22 <main+0x19e>
    1f38:	78 cf       	rjmp	.-272    	; 0x1e2a <main+0xa6>
  default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
      // Undo vector patch in bottom page so verify passes
      if (address.word == rstVect0) ch = rstVect0_sav;
      else if (address.word == rstVect1) ch = rstVect1_sav;
    1f3a:	01 30       	cpi	r16, 0x01	; 1
    1f3c:	11 05       	cpc	r17, r1
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <main+0x1c2>
    1f40:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_edata+0x85>
    1f44:	f3 cf       	rjmp	.-26     	; 0x1f2c <main+0x1a8>
      else if (address.word == saveVect0) ch = saveVect0_sav;
    1f46:	0e 31       	cpi	r16, 0x1E	; 30
    1f48:	11 05       	cpc	r17, r1
    1f4a:	19 f4       	brne	.+6      	; 0x1f52 <main+0x1ce>
    1f4c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <_edata+0x86>
    1f50:	ed cf       	rjmp	.-38     	; 0x1f2c <main+0x1a8>
      else if (address.word == saveVect1) ch = saveVect1_sav;
    1f52:	0f 31       	cpi	r16, 0x1F	; 31
    1f54:	11 05       	cpc	r17, r1
    1f56:	19 f4       	brne	.+6      	; 0x1f5e <main+0x1da>
    1f58:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <_edata+0x87>
    1f5c:	e7 cf       	rjmp	.-50     	; 0x1f2c <main+0x1a8>
      else ch = pgm_read_byte_near(address.bptr);
    1f5e:	f8 01       	movw	r30, r16
    1f60:	84 91       	lpm	r24, Z
    1f62:	e4 cf       	rjmp	.-56     	; 0x1f2c <main+0x1a8>

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    1f64:	85 37       	cpi	r24, 0x75	; 117
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <main+0x1f2>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f68:	1b d0       	rcall	.+54     	; 0x1fa0 <verifySpace>
      putch(SIGNATURE_0);
    1f6a:	8e e1       	ldi	r24, 0x1E	; 30
    1f6c:	0a d0       	rcall	.+20     	; 0x1f82 <putch>
      putch(SIGNATURE_1);
    1f6e:	83 e9       	ldi	r24, 0x93	; 147
    1f70:	08 d0       	rcall	.+16     	; 0x1f82 <putch>
      putch(SIGNATURE_2);
    1f72:	87 e0       	ldi	r24, 0x07	; 7
    1f74:	59 cf       	rjmp	.-334    	; 0x1e28 <main+0xa4>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f76:	81 35       	cpi	r24, 0x51	; 81
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <main+0x1f8>
    1f7a:	6b cf       	rjmp	.-298    	; 0x1e52 <main+0xce>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f7c:	88 e0       	ldi	r24, 0x08	; 8
    1f7e:	0c d0       	rcall	.+24     	; 0x1f98 <watchdogConfig>
    1f80:	68 cf       	rjmp	.-304    	; 0x1e52 <main+0xce>

00001f82 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f82:	5d 9b       	sbis	0x0b, 5	; 11
    1f84:	fe cf       	rjmp	.-4      	; 0x1f82 <putch>
  UART_UDR = ch;
    1f86:	8c b9       	out	0x0c, r24	; 12
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f88:	08 95       	ret

00001f8a <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f8a:	5f 9b       	sbis	0x0b, 7	; 11
    1f8c:	fe cf       	rjmp	.-4      	; 0x1f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f8e:	5c 99       	sbic	0x0b, 4	; 11
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f92:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f94:	8c b1       	in	r24, 0x0c	; 12
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1f96:	08 95       	ret

00001f98 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f98:	98 e1       	ldi	r25, 0x18	; 24
    1f9a:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1f9c:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
    1f9e:	08 95       	ret

00001fa0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fa0:	f4 df       	rcall	.-24     	; 0x1f8a <getch>
    1fa2:	80 32       	cpi	r24, 0x20	; 32
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fa6:	88 e0       	ldi	r24, 0x08	; 8
    1fa8:	f7 df       	rcall	.-18     	; 0x1f98 <watchdogConfig>
    1faa:	ff cf       	rjmp	.-2      	; 0x1faa <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fac:	84 e1       	ldi	r24, 0x14	; 20
    1fae:	e9 cf       	rjmp	.-46     	; 0x1f82 <putch>

00001fb0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1fb0:	cf 93       	push	r28
    1fb2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fb4:	ea df       	rcall	.-44     	; 0x1f8a <getch>
    1fb6:	c1 50       	subi	r28, 0x01	; 1
    1fb8:	e9 f7       	brne	.-6      	; 0x1fb4 <getNch+0x4>
  verifySpace();
}
    1fba:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fbc:	f1 cf       	rjmp	.-30     	; 0x1fa0 <verifySpace>

00001fbe <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	0a 01       	movw	r0, r20
    1fc2:	67 bf       	out	0x37, r22	; 55
    1fc4:	e8 95       	spm
    1fc6:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fc8:	07 b6       	in	r0, 0x37	; 55
    1fca:	00 fc       	sbrc	r0, 0
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1fce:	66 70       	andi	r22, 0x06	; 6
    1fd0:	29 f0       	breq	.+10     	; 0x1fdc <do_spm+0x1e>
    1fd2:	45 2b       	or	r20, r21
    1fd4:	19 f4       	brne	.+6      	; 0x1fdc <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    1fd6:	81 e1       	ldi	r24, 0x11	; 17
    1fd8:	87 bf       	out	0x37, r24	; 55
    1fda:	e8 95       	spm
  }
#endif
}
    1fdc:	08 95       	ret
